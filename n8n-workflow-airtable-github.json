{
  "name": "Airtable 連携版 Slack to GitHub",
  "nodes": [
    {
      "parameters": {
        "path": "/webhook/slack-airtable",
        "options": {}
      },
      "id": "67890123-4567-890a-bcde-f0123456789a",
      "name": "Slack Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "12345678-1234-5678-9abc-123456789abc",
              "leftValue": "={{ $json.body && $json.body.file && $json.body.file.name && $json.body.file.name.toLowerCase().endsWith('.txt') }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "23456789-3456-789a-bcde-f0123456789b",
      "name": "Filter TXT Files",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract data from new Lambda function format\nconst body = $input.first().json.body || {};\nconst file = body.file || {};\nconst project = body.project || {};\n\n// Extract file and project information\nconst fileName = file.name || '';\nconst fileContent = file.content || '';\nconst channel = file.channel || '';\nconst user = file.uploaded_by || '';\nconst ts = file.timestamp || '';\n\n// Project information from Lambda\nconst projectId = project.id || '';\nconst projectName = project.name || '';\nconst owner = project.owner || 'default-owner';\nconst repo = project.repo || 'default-repo';\nconst pathPrefix = project.path_prefix || 'docs/';\nconst branch = project.branch || 'main';\n\nreturn {\n  json: {\n    fileName: fileName,\n    fileContent: fileContent,\n    channel: channel,\n    user: user,\n    ts: ts,\n    projectId: projectId,\n    projectName: projectName,\n    owner: owner,\n    repo: repo,\n    pathPrefix: pathPrefix,\n    branch: branch\n  }\n};"
      },
      "id": "45678901-5678-901a-bcde-f0123456789d",
      "name": "Extract Project Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate markdown content from extracted data\nconst data = $input.first().json;\n\n// Generate markdown content\nconst now = new Date();\nconst dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\nconst timeStr = now.toTimeString().split(' ')[0]; // HH:MM:SS\n\nconst markdownContent = `# ${data.fileName}\n\n**Date:** ${dateStr}  \n**Time:** ${timeStr}  \n**Channel:** ${data.channel}  \n**User:** ${data.user}  \n**Project:** ${data.projectName} (${data.projectId})\n\n---\n\n${data.fileContent}\n\n---\n\n*Generated automatically from Slack via n8n*\n`;\n\n// Generate file path\nconst filePath = `${data.pathPrefix}${dateStr}-${data.fileName.replace('.txt', '.md')}`;\n\nreturn {\n  json: {\n    owner: data.owner,\n    repo: data.repo,\n    branch: data.branch,\n    filePath: filePath,\n    markdownContent: markdownContent,\n    commitMessage: `Add meeting notes: ${data.fileName} (${dateStr})`,\n    originalEvent: {\n      channel: data.channel,\n      ts: data.ts,\n      fileName: data.fileName,\n      projectName: data.projectName\n    }\n  }\n};"
      },
      "id": "67890123-7890-123a-bcde-f0123456789f",
      "name": "Generate Markdown",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        180
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "createOrUpdate",
        "owner": {
          "__rl": true,
          "value": "={{ $json.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo }}",
          "mode": "name"
        },
        "filePath": "={{ $json.filePath }}",
        "fileContent": "={{ $json.markdownContent }}",
        "commitMessage": "={{ $json.commitMessage }}",
        "additionalParameters": {
          "branch": "={{ $json.branch }}"
        }
      },
      "id": "78901234-8901-234a-bcde-f01234567890",
      "name": "Commit to GitHub",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        1120,
        180
      ],
      "credentials": {
        "githubApi": {
          "id": "__GITHUB_CRED__",
          "name": "GitHub PAT"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "post",
        "channel": "={{ $json.originalEvent.channel }}",
        "text": "✅ Markdown file successfully created and committed to GitHub!",
        "otherOptions": {
          "thread_ts": "={{ $json.originalEvent.ts }}"
        }
      },
      "id": "89012345-9012-345a-bcde-f01234567891",
      "name": "Reply to Slack Thread",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1340,
        180
      ],
      "credentials": {
        "slackApi": {
          "id": "__SLACK_API_CRED__",
          "name": "Slack API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"File processed and committed to GitHub\",\n  \"data\": {\n    \"owner\": \"{{ $json.owner }}\",\n    \"repo\": \"{{ $json.repo }}\",\n    \"filePath\": \"{{ $json.filePath }}\",\n    \"commitMessage\": \"{{ $json.commitMessage }}\"\n  }\n}",
        "options": {}
      },
      "id": "90123456-0123-456a-bcde-f01234567892",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.webhookResponse",
      "typeVersion": 1,
      "position": [
        1560,
        180
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"ignored\",\n  \"message\": \"File type not supported (only .txt files are processed)\",\n  \"fileName\": \"{{ $json.body && $json.body.file ? $json.body.file.name : 'unknown' }}\"\n}",
        "options": {}
      },
      "id": "01234567-1234-567a-bcde-f01234567893",
      "name": "Webhook Response - Ignored",
      "type": "n8n-nodes-base.webhookResponse",
      "typeVersion": 1,
      "position": [
        680,
        420
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "post",
        "channel": "={{ $json.originalEvent.channel }}",
        "text": "❌ Error processing file. Please check the configuration.",
        "otherOptions": {
          "thread_ts": "={{ $json.originalEvent.ts }}"
        }
      },
      "id": "12345678-2345-678a-bcde-f01234567894",
      "name": "Error Reply to Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        1120,
        360
      ],
      "credentials": {
        "slackApi": {
          "id": "__SLACK_API_CRED__",
          "name": "Slack API"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Slack Webhook": {
      "main": [
        [
          {
            "node": "Filter TXT Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter TXT Files": {
      "main": [
        [
          {
            "node": "Extract Project Info",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Webhook Response - Ignored",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Project Info": {
      "main": [
        [
          {
            "node": "Generate Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Markdown": {
      "main": [
        [
          {
            "node": "Commit to GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Commit to GitHub": {
      "main": [
        [
          {
            "node": "Reply to Slack Thread",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Error Reply to Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply to Slack Thread": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "error-workflow"
    }
  },
  "versionId": "12345678-1234-5678-9abc-123456789abc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "12345678901234567890123456789012"
  },
  "id": "airtable-slack-github-workflow",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "1",
      "name": "airtable-integration"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "2",
      "name": "slack-github"
    }
  ]
} 