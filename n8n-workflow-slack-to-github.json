{
  "name": "Slack Classify Bot to GitHub",
  "nodes": [
    {
      "parameters": {
        "path": "/webhook/slack-classify",
        "options": {}
      },
      "id": "67890123-4567-890a-bcde-f0123456789a",
      "name": "Webhook - Slack Data",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "12345678-1234-5678-9abc-123456789abc",
              "leftValue": "={{ $json.type }}",
              "rightValue": "event_callback",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "23456789-3456-789a-bcde-f0123456789b",
      "name": "Filter Slack Events",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract relevant data from Slack event\nconst event = $input.first().json.event || {};\nconst user = event.user || 'unknown';\nconst text = event.text || '';\nconst channel = event.channel || 'unknown';\nconst timestamp = event.ts || new Date().getTime();\n\n// Simple classification logic\nlet category = 'general';\nif (text.toLowerCase().includes('bug') || text.toLowerCase().includes('issue') || text.toLowerCase().includes('error')) {\n  category = 'bug';\n} else if (text.toLowerCase().includes('feature') || text.toLowerCase().includes('request') || text.toLowerCase().includes('enhancement')) {\n  category = 'feature-request';\n} else if (text.toLowerCase().includes('question') || text.toLowerCase().includes('help') || text.toLowerCase().includes('how')) {\n  category = 'question';\n} else if (text.toLowerCase().includes('feedback') || text.toLowerCase().includes('suggestion')) {\n  category = 'feedback';\n}\n\n// Create structured data for GitHub\nconst classifiedData = {\n  id: `slack-${timestamp}-${user}`,\n  timestamp: new Date(timestamp * 1000).toISOString(),\n  user: user,\n  channel: channel,\n  text: text,\n  category: category,\n  source: 'slack',\n  metadata: {\n    original_event: event,\n    classification_timestamp: new Date().toISOString()\n  }\n};\n\nreturn { json: classifiedData };"
      },
      "id": "34567890-4567-890a-bcde-f0123456789c",
      "name": "Classify Slack Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        180
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "sintariran",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "slack-classify-bot",
          "mode": "name"
        },
        "filePath": "data/classifications.json"
      },
      "id": "45678901-5678-901a-bcde-f0123456789d",
      "name": "Get Existing Classifications",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        900,
        180
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Merge new classification with existing data\nconst newClassification = $input.first().json;\nlet existingData = [];\n\n// Check if we have existing classifications file\nconst existingFile = $input.all().find(item => item.json.content);\nif (existingFile) {\n  try {\n    const decodedContent = Buffer.from(existingFile.json.content, 'base64').toString('utf8');\n    existingData = JSON.parse(decodedContent);\n  } catch (error) {\n    console.log('No existing file or invalid JSON, starting fresh');\n    existingData = [];\n  }\n}\n\n// Add new classification\nexistingData.push(newClassification);\n\n// Keep only last 1000 entries to prevent file from growing too large\nif (existingData.length > 1000) {\n  existingData = existingData.slice(-1000);\n}\n\n// Sort by timestamp (newest first)\nexistingData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n\n// Prepare data for GitHub\nconst fileContent = JSON.stringify(existingData, null, 2);\nconst encodedContent = Buffer.from(fileContent).toString('base64');\n\nreturn {\n  json: {\n    content: encodedContent,\n    sha: existingFile ? existingFile.json.sha : undefined,\n    newClassification: newClassification,\n    totalCount: existingData.length\n  }\n};"
      },
      "id": "56789012-6789-012a-bcde-f0123456789e",
      "name": "Merge Classifications",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        180
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "createOrUpdate",
        "owner": {
          "__rl": true,
          "value": "sintariran",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "slack-classify-bot",
          "mode": "name"
        },
        "filePath": "data/classifications.json",
        "fileContent": "={{ $json.content }}",
        "commitMessage": "Add new Slack message classification: {{ $json.newClassification.category }}",
        "sha": "={{ $json.sha }}",
        "additionalParameters": {
          "branch": "main"
        }
      },
      "id": "67890123-7890-123a-bcde-f0123456789f",
      "name": "Save to GitHub",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        1340,
        180
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "createOrUpdate",
        "owner": {
          "__rl": true,
          "value": "sintariran",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "slack-classify-bot",
          "mode": "name"
        },
        "filePath": "data/daily-summary/{{ $now.format('yyyy-MM-dd') }}.json",
        "fileContent": "={{ JSON.stringify({\n  date: $now.format('yyyy-MM-dd'),\n  totalClassifications: $json.totalCount,\n  newClassification: $json.newClassification,\n  summary: {\n    user: $json.newClassification.user,\n    category: $json.newClassification.category,\n    timestamp: $json.newClassification.timestamp\n  }\n}, null, 2) }}",
        "commitMessage": "Daily summary update: {{ $now.format('yyyy-MM-dd') }}",
        "additionalParameters": {
          "branch": "main"
        }
      },
      "id": "78901234-8901-234a-bcde-f01234567890",
      "name": "Create Daily Summary",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        1340,
        360
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Classification saved to GitHub\",\n  \"data\": {\n    \"category\": \"{{ $json.newClassification.category }}\",\n    \"user\": \"{{ $json.newClassification.user }}\",\n    \"timestamp\": \"{{ $json.newClassification.timestamp }}\",\n    \"totalClassifications\": {{ $json.totalCount }}\n  }\n}",
        "options": {}
      },
      "id": "89012345-9012-345a-bcde-f01234567891",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.webhookResponse",
      "typeVersion": 1,
      "position": [
        1560,
        180
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"ignored\",\n  \"message\": \"Event type not supported\",\n  \"eventType\": \"{{ $json.type }}\"\n}",
        "options": {}
      },
      "id": "90123456-0123-456a-bcde-f01234567892",
      "name": "Webhook Response - Ignored",
      "type": "n8n-nodes-base.webhookResponse",
      "typeVersion": 1,
      "position": [
        680,
        420
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Slack Data": {
      "main": [
        [
          {
            "node": "Filter Slack Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Slack Events": {
      "main": [
        [
          {
            "node": "Classify Slack Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Webhook Response - Ignored",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Slack Message": {
      "main": [
        [
          {
            "node": "Get Existing Classifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Classifications": {
      "main": [
        [
          {
            "node": "Merge Classifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Classifications": {
      "main": [
        [
          {
            "node": "Save to GitHub",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Daily Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to GitHub": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "12345678-1234-5678-9abc-123456789abc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "12345678901234567890123456789012"
  },
  "id": "12345678901234567890123456789012",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "1",
      "name": "slack-integration"
    }
  ]
} 